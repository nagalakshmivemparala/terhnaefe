name: Full Deploy Pipeline

on:
  push:
    branches:
      - master

permissions:
  contents: read

jobs:
  deploy_app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Pull official Nginx image
      run: docker pull httpd:latest

    - name: Tag Docker image
      run: |
        docker tag httpd:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.32.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

    - name: Install NGINX Ingress Controller if not exists
      run: |
        if ! kubectl get ns ingress-nginx > /dev/null 2>&1; then
          echo "Installing ingress controller..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.1/deploy/static/provider/cloud/deploy.yaml
        else
          echo "Ingress controller already installed."
        fi

    - name: Wait for ingress controller rollout
      run: kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=180s

    - name: Deploy application manifests
      run: |
        kubectl apply -f deployment.yaml
        kubectl apply -f ingress.yaml

    - name: Wait for app deployment rollout
      run: |
        kubectl rollout status deployment/httpd --namespace=default --timeout=120s

      # Replace `my-app` with your actual app deployment name

  deploy_monitoring:
    needs: deploy_app
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.32.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --name ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

    - name: Add Prometheus Helm repo
      run: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

    - name: Update Helm repos
      run: helm repo update

    - name: Install/Upgrade kube-prometheus-stack
      run: |
        helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
        --namespace monitoring --create-namespace \
        --set prometheus.prometheusSpec.maximumStartupDurationSeconds=300 \
        --set grafana.ingress.enabled=false \
        --set grafana.ingress.path="/grafana" \
        --set grafana.ingress.pathType="Prefix" \
        --set grafana.ingress.annotations."nginx\.ingress\.kubernetes\.io/rewrite-target"="/" \
        --set prometheus.ingress.enabled=false \
        --set prometheus.ingress.path="/prometheus" \
        --set prometheus.ingress.pathType="Prefix" \
        --set prometheus.ingress.annotations."nginx\.ingress\.kubernetes\.io/rewrite-target"="/" \
        --set ingress-nginx.enabled=false  # assuming you're handling ingress yourself


    - name: Apply monitoring ingress
      run: |
        kubectl delete -f monitoring-ingress.yaml  # namespace: monitoring   
    
    - name: Wait for Grafana to be ready
      run: kubectl rollout status deployment/monitoring-grafana -n monitoring --timeout=180s
